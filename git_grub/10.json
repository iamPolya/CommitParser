{"files": [{"name": "js/script.js", "is_deleted": false, "new_rows": ["$(document).ready(() => {", " // Declaration of global variables", " const searchBtn = $('#search-icon');", " const searchQuery = $('#search-query');", " const saveToDb = $('.saveBtn');", " const addComments = $('.comment-save');", " // Add class to caret using materialize class", " // Prevent bubbling on collapsible when saved button is clicked", " $('.collapsible .saveBtn').on('click', (e) => {", " e.stopPropagation();", " // Trigger search button with enter key", " $('#search-query').keypress((e) => {", " if (e.which == 13) {", " $('#search-icon').click();", " }", " // Search button function", " searchBtn.on('click', async () => {", " // Trigger loading spinner when ajax call initiates", " $(document).ajaxStart(() => {", " $('.loading').removeClass('display-none');", " // Hide loading spinner when ajax call completes", " $(document).ajaxStop(() => {", " $('.loading').addClass('display-none');", " });", "", " // Variables to target user input", " let searchTerm = searchQuery.val().trim();", " let cuisinePref = ($('.cuisine option:selected').toArray().map((item) => item.text)).toString();", " let dietPref = ($('.diet option:selected').toArray().map((item) => item.text)).toString();", " let allergies = ($('.intolerance option:selected').toArray().map((item) => item.text)).toString();", " // Object containing user input to send to back end", " const preferences = {", " term: searchTerm,", " cuisine: cuisinePref,", " diet: dietPref,", " allergy: allergies,", " };", " // If statements to manage null values for search parameters", " const { origin } = window.location;", " if (searchTerm === '') {", " searchTerm = 'blank';", " }", "", " if (cuisinePref === '') {", " cuisinePref = 'blank';", " }", "", " if (dietPref === '') {", " dietPref = 'blank';", " }", "", " if (allergies === '') {", " allergies = 'blank';", " }", "", " // Change url to hit required endpoint", " window.location.replace(`${origin}/api/recipe/${searchTerm}/${cuisinePref}/${dietPref}/${allergies}`);", " // Get request to retrieve data from API", " try {", " const result = await $.ajax({", " url: `/api/recipe/${searchTerm}/${cuisinePref}/${dietPref}/${allergies}`,", " method: 'GET',", " data: preferences,", " });", " } catch (err) {", " console.error('ERROR - script.js - searchBtn: ', err);", " }", " });", " saveToDb.on('click', async (event) => {", " // Confirmation modal", "", " // Dynamically change heart colour", " $(event.target).addClass('saved');", "", " // Create object to be sent to back end to be added to DB", " recipeId: $(event.target).parent().parent().parent()", " .data('id'),", " id: ($('#user-name').data('id')) + ($(event.target).parent().parent().parent()", " .data('id')),", " summary: $(event.target).parent().parent().parent()", " .parent()", " try {", " const result = await $.ajax({", " type: 'POST',", " url: '/api/recipe',", " data: dataTodo,", " });", " modal.style.display = 'block';", " } catch (err) {", " console.error('ERROR - script.js - saveToDb: ', err);", " }", " // Add notes function", " addComments.on('click', async (event) => {", " // Confirmation modal", " // Target DOM elements to add comments to DB", " try {", " // Ajax call to update DB", " const result = await $.ajax({", " method: 'PUT',", " url: `/api/dashboard/${id}`,", " data: comments,", " modal.style.display = 'block';", " } catch (err) {", " console.error('ERROR - script.js - addComments: ', err);", " }", " // Pass recipe information to the modal when delete button is clicked", " $('.delete').on('click', (e) => {", " const recId = $(e.target).parent().parent().parent()", " .data('id');", " const title = $(e.target).parent().parent().find('.title')", " .html();", " $('.destroy').data('id', recId);", " $('.modal-title').text(title);", " });", " // Function to delete recipe from DB", " $('.destroy').on('click', async (e) => {", " const deletedId = $(e.target).data('id');", " try {", " const result = await $.ajax({", " method: 'DELETE',", " url: `/api/recipe/${deletedId}`,", " });", " window.location.href = '/dashboard';", " } catch (err) {", " console.error('ERROR - script.js - destroy: ', err);", " }"], "removed_rows": ["$('.collapsible .saveBtn').on('click', (e) => {", " e.stopPropagation();", "});", "$(document).click(() => {", " $('.select-dropdown').addClass('white-text');", "})", "", "$('#search-query').keypress((e) => {", " if (e.which == 13) {", " $('#search-icon').click();", " }", "});", "", "const searchBtn = $('#search-icon');", "const searchQuery = $('#search-query');", "searchBtn.on('click', async () => {", " $(document).ajaxStart(() => {", " $('.loading').removeClass('display-none');", "", " // Hide loading spinner and show search button when ajax call completes", " $(document).ajaxStop(() => {", " $('.loading').addClass('display-none');", " let searchTerm = searchQuery.val().trim();", " let cuisinePref = ($('.cuisine option:selected').toArray().map((item) => item.text)).toString();", " let dietPref = ($('.diet option:selected').toArray().map((item) => item.text)).toString();", " let allergies = ($('.intolerance option:selected').toArray().map((item) => item.text)).toString();", " const preferences = {", " term: searchTerm,", " cuisine: cuisinePref,", " diet: dietPref,", " allergy: allergies,", " };", " const { origin } = window.location;", " if (searchTerm === '') {", " searchTerm = 'blank';", " }", "", " if (cuisinePref === '') {", " cuisinePref = 'blank';", " }", "", " if (dietPref === '') {", " dietPref = 'blank';", " }", "", " if (allergies === '') {", " allergies = 'blank';", " }", "", " window.location.replace(`${origin}/api/recipe/${searchTerm}/${cuisinePref}/${dietPref}/${allergies}`);", " try {", " const result = await $.ajax({", " url: `/api/recipe/${searchTerm}/${cuisinePref}/${dietPref}/${allergies}`,", " method: 'GET',", " data: preferences,", " } catch (err) {", " console.error('ERROR - script.js - searchBtn: ', err);", " }", "});", "$(document).ready(() => {", " $('.caret').addClass('white');", " const saveToDb = $('.saveBtn');", " const addComments = $('.comment-save');", " saveToDb.on('click', (event) => {", " // Get the modal", "", " // Get the <span> element that closes the modal", "", " // When the user clicks on <span> (x), close the modal", "", " // When the user clicks anywhere outside of the modal, close it", " $(event.target).addClass('saved'); ", " // get data from ajax call", " recipeId: $(event.target).parent().parent().parent().data('id'),", " id: ($('#user-name').data('id')) + ($(event.target).parent().parent().parent().data('id')),", " summary: $(event.target).parent().parent().parent().parent()", " console.log(dataTodo);", "", " $.ajax({", " type: 'POST',", " url: '/api/recipe',", " data: dataTodo,", " success: function (data) { ", " alert(dataTodo.title + 'Recipe successfully saved !')", " },", " complete: false,", " }).then(() => {", " console.log('success');", " });", " modal.style.display = 'block';", " // create or update comments", " addComments.on('click', (event) => {", " // Get the modal", "", " // Get the button that opens the modal", " const btn = document.getElementById('myBtn');", "", " // Get the <span> element that closes the modal", "", " // When the user clicks on <span> (x), close the modal", "", " // When the user clicks anywhere outside of the modal, close it", "", " // const comments = {", " //   newComment: $(event.target).parent().find('.comment').val(),", " // };", "", " $.ajax({", " method: 'PUT',", " url: `/api/dashboard/${id}`,", " data: comments,", " })", " .then(() => {", " // window.location.href = '/dashboard';", " modal.style.display = 'block';", "});", "$('.delete').on('click', (e) => {", " const recId = $(e.target).parent().parent().parent().data('id');", " console.log(recId);", " const title = $(e.target).parent().parent().find('.title')", " .html();", " $('.destroy').data('id', recId);", " $('.modal-title').text(title);", "});", "", "$('.destroy').on('click', (e) => {", " const deletedId = $(e.target).data('id');", " $.ajax({", " method: 'DELETE',", " url: `/api/recipe/${deletedId}`,", " }).then(() => {", " window.location.href = '/dashboard';"]}]}