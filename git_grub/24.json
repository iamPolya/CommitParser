{"files": [{"name": "routes/recipe-api-routes.js", "is_deleted": false, "new_rows": ["app.get('/dashboard', authCheck, async (req, res) => {", " try {", " const result = await db.findAll({", " where: {", " googleId: req.user.googleId,", " },", " });", " result,", " } catch (err) {", " console.error('ERROR - recipe-api-routes.js - get/dashboard', err);", " }", "app.put('/api/dashboard/:id', async (req, res) => {", " try {", " const result = await db.update(", " { comments: req.body.newComment },", " {", " where: {", " id: req.params.id,", " },", " );", " } catch (err) {", " console.error('ERROR - recipe-api-routes.js - put/api/dashboard/:id', err);", " }", " // Hold req.params in variables", " // If statement to replace blank keyword with an empty string avoid API error", " // Query DB for all recipes associated with logged in user", " // Create an array of recipe IDs saved to logged in user's dashboard", " // Make api call using user's inputs as arguments", " // Loop through array of recipe objects and return a new array of IDs only and convert to string", " // Second api call to retrieve instructions using list of IDs as an argument", " // Create new object for each recipe to be rendered to front end", " // Render recipe.handlebars file, passing in recipe objects", " res.redirect('/error');", " try {", " const data = await db.create({", " id: req.body.id,", " googleId: req.body.googleId,", " recipeId: req.body.recipeId,", " title: req.body.title,", " summary: req.body.summary,", " cuisine: req.body.cuisine,", " vegetarian: req.body.vegetarian,", " imageUrl: req.body.imageUrl,", " time: req.body.time,", " comments: req.body.comments,", " if (data.affectedRows === 0) {", " return res.status(500).end();", " }", " res.status(200);", " } catch (err) {", " console.error('ERROR - recipe-api-routes.js - post/api/recipe', err);", " }", "// Delete the Recipe with the id available to us in req.params.id", "app.delete('/api/recipe/:id', async (req, res) => {", " try {", " const data = await db.destroy({", " where: {", " id: req.params.id,", " },", " });", " res.json(data);", " } catch (err) {", " console.error('ERROR - recipe-api-routes.js - delete/api/recipe/:id', err);", " }"], "removed_rows": ["app.get('/dashboard', authCheck, (req, res) => {", " db.findAll({", " where: {", " googleId: req.user.googleId,", " },", " }).then((dbRecipe) => {", " dbRecipe,", " });", "app.put('/api/dashboard/:id', (req, res) => {", " db.update(", " { comments: req.body.newComment },", " {", " where: {", " id: req.params.id,", " },", " ).then(() => {", " });", "", "", "", " db.create({", " id: req.body.id,", " googleId: req.body.googleId,", " recipeId: req.body.recipeId,", " title: req.body.title,", " summary: req.body.summary,", " cuisine: req.body.cuisine,", " vegetarian: req.body.vegetarian,", " imageUrl: req.body.imageUrl,", " time: req.body.time,", " comments: req.body.comments,", " })", " .then((dbRecipe) => {", " if (dbRecipe.affectedRows === 0) {", " return res.status(500).end();", " }", "", " res.status(200);", " //  res.render('recipe', { dbRecipe });", "app.delete('/api/recipe/:id', (req, res) => {", " // Delete the Recipe with the id available to us in req.params.id", " db.destroy({", " where: {", " id: req.params.id,", " },", " }).then((dbRecipe) => {", " res.json(dbRecipe);", " });"]}]}