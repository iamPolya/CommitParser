{"files": [{"name": "entity/EntityDamageByBlockEvent.java", "is_deleted": false, "new_rows": ["import java.util.Map;", "", " @Deprecated", " public EntityDamageByBlockEvent(final Block damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {", " super(damagee, cause, modifiers);", " this.damager = damager;", "    }", ""], "removed_rows": []}, {"name": "entity/EntityDamageByEntityEvent.java", "is_deleted": false, "new_rows": ["import java.util.Map;", "", " @Deprecated", " public EntityDamageByEntityEvent(final Entity damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {", " super(damagee, cause, modifiers);", " this.damager = damager;", "    }", ""], "removed_rows": []}, {"name": "entity/EntityDamageEvent.java", "is_deleted": false, "new_rows": ["import java.util.EnumMap;", "import java.util.Map;", "", "import org.apache.commons.lang.Validate;", "import org.bukkit.entity.Player;", "import com.google.common.collect.ImmutableMap;", "", " private static final DamageModifier[] MODIFIERS = DamageModifier.values();", " private final Map<DamageModifier, Double> modifiers;", " private final Map<DamageModifier, Double> originals;", " @Deprecated", " this(damagee, cause, new EnumMap<DamageModifier, Double>(ImmutableMap.of(DamageModifier.BASE, damage)));", "    }", "", " public EntityDamageEvent(final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {", " Validate.isTrue(modifiers.containsKey(DamageModifier.BASE), \"BASE DamageModifier missing\");", " Validate.isTrue(!modifiers.containsKey(null), \"Cannot have null DamageModifier\");", " this.originals = new EnumMap<DamageModifier, Double>(modifiers);", " this.modifiers = modifiers;", "     * Gets the original damage for the specified modifier, as defined at this", "     * event's construction.", "     *", "     * @param type the modifier", "     * @throws IllegalArgumentException if type is null", " */", " public double getOriginalDamage(DamageModifier type) throws IllegalArgumentException {", " final Double damage = originals.get(type);", " if (damage != null) {", " return damage;", "        }", " if (type == null) {", " throw new IllegalArgumentException(\"Cannot have null DamageModifier\");", "        }", " return 0;", "    }", "", " /**", "     * Sets the damage for the specified modifier.", "     *", "     * @param damage the scalar value of the damage's modifier", "     * @see #getFinalDamage()", "     * @throws IllegalArgumentException if type is null", "     * @throws UnsupportedOperationException if the caller does not support", "     *     the particular DamageModifier, or to rephrase, when {@link", "     *     #isApplicable(DamageModifier)} returns false", " */", " public void setDamage(DamageModifier type, double damage) throws IllegalArgumentException, UnsupportedOperationException {", " if (!modifiers.containsKey(type)) {", " throw type == null ? new IllegalArgumentException(\"Cannot have null DamageModifier\") : new UnsupportedOperationException(type + \" is not applicable to \" + getEntity());", "        }", "        modifiers.put(type, damage);", "    }", "", " /**", "     * Gets the damage change for some modifier", "     *", "     * @return The raw amount of damage caused by the event", "     * @throws IllegalArgumentException if type is null", "     * @see DamageModifier#BASE", " */", " public double getDamage(DamageModifier type) throws IllegalArgumentException {", " Validate.notNull(type, \"Cannot have null DamageModifier\");", " final Double damage = modifiers.get(type);", " return damage == null ? 0 : damage;", "    }", "", " /**", "     * This checks to see if a particular modifier is valid for this event's", "     * caller, such that, {@link #setDamage(DamageModifier, double)} will not", "     * throw an {@link UnsupportedOperationException}.", "     * <p>", "     * {@link DamageModifier#BASE} is always applicable.", "     *", "     * @param type the modifier", "     * @return true if the modifier is supported by the caller, false otherwise", "     * @throws IllegalArgumentException if type is null", " */", " public boolean isApplicable(DamageModifier type) throws IllegalArgumentException {", " Validate.notNull(type, \"Cannot have null DamageModifier\");", " return modifiers.containsKey(type);", "    }", "", " /**", "     * Gets the raw amount of damage caused by the event", "     * @return The raw amount of damage caused by the event", "     * @see DamageModifier#BASE", " return getDamage(DamageModifier.BASE);", "    }", "", " /**", "     * Gets the amount of damage caused by the event after all damage", "     * reduction is applied.", "     *", "     * @return the amount of damage caused by the event", " */", " public final double getFinalDamage() {", " double damage = 0;", " for (DamageModifier modifier : MODIFIERS) {", "            damage += getDamage(modifier);", "        }", "     * Sets the raw amount of damage caused by the event", "     * @param damage The raw amount of damage caused by the event", " setDamage(DamageModifier.BASE, damage);", " /**", "     * An enum to specify the types of modifier", " */", " public enum DamageModifier {", " /**", "         * This represents the amount of damage being done, also known as the", "         * raw {@link EntityDamageEvent#getDamage()}.", " */", " BASE,", " /**", "         * This represents the damage reduced by a wearing a helmet when hit", "         * by a falling block.", " */", " HARD_HAT,", " /**", "         * This represents  the damage reduction caused by blocking, only present for", "         * {@link Player Players}.", " */", " BLOCKING,", " /**", "         * This represents the damage reduction caused by wearing armor.", " */", " ARMOR,", " /**", "         * This represents the damage reduction caused by the Resistance potion effect.", " */", " RESISTANCE,", " /**", "         * This represents the damage reduction caused by the combination of:", "         * <ul>", "         * <li>", "         *     Armor enchantments", "         * </li><li>", "         *     Witch's potion resistance", "         * </li>", "         * </ul>", " */", " MAGIC,", " /**", "         * This represents the damage reduction caused by the absorption potion", "         * effect.", " */", " ABSORPTION,", "        ;", "    }", ""], "removed_rows": [" private double damage;", " this.damage = damage;", "     * Gets the amount of damage caused by the event", "     * @return The amount of damage caused by the event", "     * Sets the amount of damage caused by the event", "     * @param damage The amount of damage caused by the event", " this.damage = damage;"]}]}