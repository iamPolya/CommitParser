{"files": [{"name": "entity/EntityDamageByBlockEvent.java", "is_deleted": false, "new_rows": ["import com.google.common.base.Function;", " public EntityDamageByBlockEvent(final Block damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers, final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {", " super(damagee, cause, modifiers, modifierFunctions);"], "removed_rows": [" public EntityDamageByBlockEvent(final Block damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {", " super(damagee, cause, modifiers);"]}, {"name": "entity/EntityDamageByEntityEvent.java", "is_deleted": false, "new_rows": ["import com.google.common.base.Function;", " public EntityDamageByEntityEvent(final Entity damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers, final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {", " super(damagee, cause, modifiers, modifierFunctions);"], "removed_rows": [" public EntityDamageByEntityEvent(final Entity damager, final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {", " super(damagee, cause, modifiers);"]}, {"name": "entity/EntityDamageEvent.java", "is_deleted": false, "new_rows": ["import com.google.common.base.Function;", "import com.google.common.base.Functions;", " private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);", " private final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions;", " this(damagee, cause, new EnumMap<DamageModifier, Double>(ImmutableMap.of(DamageModifier.BASE, damage)), new EnumMap<DamageModifier, Function<? super Double, Double>>(ImmutableMap.of(DamageModifier.BASE, ZERO)));", " public EntityDamageEvent(final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers, final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {", " Validate.noNullElements(modifiers.values(), \"Cannot have null modifier values\");", " Validate.isTrue(modifiers.keySet().equals(modifierFunctions.keySet()), \"Must have a modifier function for each DamageModifier\");", " Validate.noNullElements(modifierFunctions.values(), \"Cannot have null modifier function\");", " this.modifierFunctions = modifierFunctions;", "     * Sets the raw amount of damage caused by the event.", "     * <p>", "     * For compatibility this also recalculates the modifiers and scales", "     * them by the difference between the modifier for the previous damage", "     * value and the new one.", " // These have to happen in the same order as the server calculates them, keep the enum sorted", " double remaining = damage;", " double oldRemaining = getDamage(DamageModifier.BASE);", " for (DamageModifier modifier : MODIFIERS) {", " if (!isApplicable(modifier)) {", " continue;", "            }", "", " Function<? super Double, Double> modifierFunction = modifierFunctions.get(modifier);", " double newVanilla = modifierFunction.apply(remaining);", " double oldVanilla = modifierFunction.apply(oldRemaining);", " double difference = oldVanilla - newVanilla;", "", " // Don't allow value to cross zero, assume zero values should be negative", " double old = getDamage(modifier);", " if (old > 0) {", "                setDamage(modifier, Math.max(0, old - difference));", "            } else {", "                setDamage(modifier, Math.min(0, old - difference));", "            }", "            remaining += newVanilla;", "            oldRemaining += oldVanilla;", "        }", ""], "removed_rows": [" this(damagee, cause, new EnumMap<DamageModifier, Double>(ImmutableMap.of(DamageModifier.BASE, damage)));", " public EntityDamageEvent(final Entity damagee, final DamageCause cause, final Map<DamageModifier, Double> modifiers) {", "     * Sets the raw amount of damage caused by the event"]}]}