{"files": [{"name": "file/FileConfiguration.java", "is_deleted": false, "new_rows": ["import com.google.common.base.Charsets;", "", "import java.io.FileOutputStream;", "import java.io.OutputStreamWriter;", "import java.io.Reader;", "import java.io.Writer;", "import java.nio.charset.Charset;", "", "import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;", " /**", "     * This value specified that the system default encoding should be", "     * completely ignored, as it cannot handle the ASCII character set, or it", "     * is a strict-subset of UTF8 already (plain ASCII).", "     *", "     * @deprecated temporary compatibility measure", " */", " @Deprecated", " public static final boolean UTF8_OVERRIDE;", " /**", "     * This value specifies if the system default encoding is unicode, but", "     * cannot parse standard ASCII.", "     *", "     * @deprecated temporary compatibility measure", " */", " @Deprecated", " public static final boolean UTF_BIG;", " /**", "     * This value specifies if the system supports unicode.", "     *", "     * @deprecated temporary compatibility measure", " */", " @Deprecated", " public static final boolean SYSTEM_UTF;", " static {", " final byte[] testBytes = Base64Coder.decode(\"ICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX4NCg==\");", " final String testString = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\r\\n\";", " final Charset defaultCharset = Charset.defaultCharset();", " final String resultString = new String(testBytes, defaultCharset);", " final boolean trueUTF = defaultCharset.name().contains(\"UTF\");", " UTF8_OVERRIDE = !testString.equals(resultString) || defaultCharset.equals(Charset.forName(\"US-ASCII\"));", " SYSTEM_UTF = trueUTF || UTF8_OVERRIDE;", " UTF_BIG = trueUTF && UTF8_OVERRIDE;", "    }", "", "     * <p>", "     * This method will save using the system default encoding, or possibly", "     * using UTF8.", " Writer writer = new OutputStreamWriter(new FileOutputStream(file), UTF8_OVERRIDE && !UTF_BIG ? Charsets.UTF_8 : Charset.defaultCharset());", "     * <p>", "     * This method will save using the system default encoding, or possibly", "     * using UTF8.", "     * <p>", "     * This will attempt to use the {@link Charset#defaultCharset()} for", "     * files, unless {@link #UTF8_OVERRIDE} but not {@link #UTF_BIG} is", "     * specified.", " final FileInputStream stream = new FileInputStream(file);", "", "        load(new InputStreamReader(stream, UTF8_OVERRIDE && !UTF_BIG ? Charsets.UTF_8 : Charset.defaultCharset()));", "     * <p>", "     * This will attempt to use the {@link Charset#defaultCharset()}, unless", "     * {@link #UTF8_OVERRIDE} or {@link #UTF_BIG} is specified.", "     * @deprecated This does not consider encoding", "     * @see #load(Reader)", " @Deprecated", "        load(new InputStreamReader(stream, UTF8_OVERRIDE ? Charsets.UTF_8 : Charset.defaultCharset()));", "    }", "", " /**", "     * Loads this {@link FileConfiguration} from the specified reader.", "     * <p>", "     * All the values contained within this configuration will be removed,", "     * leaving only settings and defaults, and the new values will be loaded", "     * from the given stream.", "     *", "     * @param reader the reader to load from", "     * @throws IOException thrown when underlying reader throws an IOException", "     * @throws InvalidConfigurationException thrown when the reader does not", "     *      represent a valid Configuration", "     * @throws IllegalArgumentException thrown when reader is null", " */", " public void load(Reader reader) throws IOException, InvalidConfigurationException {", " BufferedReader input = reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);", " StringBuilder builder = new StringBuilder();"], "removed_rows": ["import java.io.FileWriter;", " FileWriter writer = new FileWriter(file);", "        load(new FileInputStream(file));", " InputStreamReader reader = new InputStreamReader(stream);", " StringBuilder builder = new StringBuilder();", " BufferedReader input = new BufferedReader(reader);"]}, {"name": "file/YamlConfiguration.java", "is_deleted": false, "new_rows": ["import java.io.Reader;", "        yamlOptions.setAllowUnicode(SYSTEM_UTF);", "     * <p>", "     * The encoding used may follow the system dependent default.", "     * @deprecated does not properly consider encoding", "     * @see #load(InputStream)", "     * @see #loadConfiguration(Reader)", " @Deprecated", "", "", " /**", "     * Creates a new {@link YamlConfiguration}, loading from the given reader.", "     * <p>", "     * Any errors loading the Configuration will be logged and then ignored.", "     * If the specified input is not a valid config, a blank config will be", "     * returned.", "     *", "     * @param reader input", "     * @return resulting configuration", "     * @throws IllegalArgumentException Thrown if stream is null", " */", " public static YamlConfiguration loadConfiguration(Reader reader) {", " Validate.notNull(reader, \"Stream cannot be null\");", "", " YamlConfiguration config = new YamlConfiguration();", "", " try {", "            config.load(reader);", "        } catch (IOException ex) {", " Bukkit.getLogger().log(Level.SEVERE, \"Cannot load configuration from stream\", ex);", "        } catch (InvalidConfigurationException ex) {", " Bukkit.getLogger().log(Level.SEVERE, \"Cannot load configuration from stream\", ex);", "        }", "", " return config;", "    }"], "removed_rows": []}, {"name": "plugin/PluginAwareness.java", "is_deleted": false, "new_rows": ["package org.bukkit.plugin;", "", "import java.util.Set;", "", "import org.bukkit.plugin.java.JavaPlugin;", "", "/**", " * Represents a concept that a plugin is aware of.", " * <p>", " * The internal representation may be singleton, or be a parameterized", " * instance, but must be immutable.", " */", "public interface PluginAwareness {", " /**", "     * Each entry here represents a particular plugin's awareness. These can", "     * be checked by using {@link PluginDescriptionFile#getAwareness()}.{@link", "     * Set#contains(Object) contains(flag)}.", " */", " public enum Flags implements PluginAwareness {", " /**", "         * This specifies that all (text) resources stored in a plugin's jar", "         * use UTF-8 encoding.", "         *", "         * @see JavaPlugin#getTextResource(String)", " */", " UTF8,", "        ;", "    }", "}"], "removed_rows": []}]}