{"files": [{"name": "plugin/PluginDescriptionFile.java", "is_deleted": false, "new_rows": ["", " /**", "     * @deprecated Internal use", " */", " @Deprecated", " public String getRawName() {", " return rawName;", "    }"], "removed_rows": []}, {"name": "java/JavaPluginLoader.java", "is_deleted": false, "new_rows": [" public Plugin loadPlugin(final File file) throws InvalidPluginException {", " final PluginDescriptionFile description;", " final File parentFile = file.getParentFile();", " final File dataFolder = new File(parentFile, description.getName());", " @SuppressWarnings(\"deprecation\")", " final File oldDataFolder = new File(parentFile, description.getRawName());", "            server.getLogger().warning(String.format(", " \"While loading %s (%s) found old-data folder: `%s' next to the new one `%s'\",", "                description.getFullName(),", " throw new InvalidPluginException(\"Unable to rename old data folder: `\" + oldDataFolder + \"' to: `\" + dataFolder + \"'\");", " \"While loading %s (%s) renamed data folder: `%s' to `%s'\",", "                description.getFullName(),", " \"Projected datafolder: `%s' for %s (%s) exists and is not a directory\",", "                description.getFullName(),", " for (final String pluginName : description.getDepend()) {", " final PluginClassLoader loader;"], "removed_rows": ["import java.util.List;", "import com.google.common.collect.ImmutableList;", "", " public Plugin loadPlugin(File file) throws InvalidPluginException {", " PluginDescriptionFile description;", " File dataFolder = new File(file.getParentFile(), description.getName());", " File oldDataFolder = getDataFolder(file);", "            server.getLogger().log(Level.INFO, String.format(", " \"While loading %s (%s) found old-data folder: %s next to the new one: %s\",", "                description.getName(),", " throw new InvalidPluginException(\"Unable to rename old data folder: '\" + oldDataFolder + \"' to: '\" + dataFolder + \"'\");", " \"While loading %s (%s) renamed data folder: '%s' to '%s'\",", "                description.getName(),", " \"Projected datafolder: '%s' for %s (%s) exists and is not a directory\",", "                description.getName(),", " List<String> depend = description.getDepend();", " if (depend == null) {", "            depend = ImmutableList.<String>of();", "        }", "", " for (String pluginName : depend) {", " PluginClassLoader loader;", " private File getDataFolder(File file) {", " File dataFolder = null;", "", " String filename = file.getName();", " int index = file.getName().lastIndexOf(\".\");", "", " if (index != -1) {", " String name = filename.substring(0, index);", "", "            dataFolder = new File(file.getParentFile(), name);", "        } else {", " // This is if there is no extension, which should not happen", " // Using _ to prevent name collision", "", "            dataFolder = new File(file.getParentFile(), filename + \"_\");", "        }", "", " return dataFolder;", "    }", ""]}]}