{"files": [{"name": "pom.xml", "is_deleted": false, "new_rows": ["    <version>1.7.8-R0.1-SNAPSHOT</version>"], "removed_rows": ["    <version>1.7.5-R0.1-SNAPSHOT</version>"]}, {"name": "bukkit/BanList.java", "is_deleted": false, "new_rows": [" /**", "         * Banned player UUID", " */", " UUID,"], "removed_rows": []}, {"name": "bukkit/OfflinePlayer.java", "is_deleted": false, "new_rows": ["     * <p>", "     * Names are no longer unique past a single game session. For persistent storage", "     * it is recommended that you use {@link #getUniqueId()} instead.", "     * @return Player name or null if we have not seen a name for this player yet"], "removed_rows": ["     * @deprecated Use {@link #getUniqueId()} as player names are no longer", "     *     guaranteed to be unique", "     * @return Player name", " @Deprecated"]}, {"name": "bukkit/Server.java", "is_deleted": false, "new_rows": ["     * This method may involve a blocking web request to get the UUID for the", "     * given name.", "     * <p>", "     * @deprecated Persistent storage of users should be by UUID as names are no longer", "     *      unique past a single session.", "     * @see #getOfflinePlayer(java.util.UUID)", "     * <p>", "     * Bans by name are no longer supported and this method will return", "     * null when trying to request them. The replacement is bans by UUID."], "removed_rows": ["     * @deprecated Use {@link #getOfflinePlayer(UUID)} as player names are no", "     *     longer guaranteed to be unique"]}, {"name": "block/Skull.java", "is_deleted": false, "new_rows": ["import org.bukkit.OfflinePlayer;", "import java.util.UUID;", "", "     * @return the owner of the skull or null if the profile does not have a name", "     * @deprecated Skulls no longer store player names, they store profiles", "     * @see #getPlayer()", " @Deprecated", "     * Does nothing", "     * @deprecated Skulls no longer store player names, they store profiles", "     * @see #setPlayer(org.bukkit.OfflinePlayer)", " @Deprecated", " /**", "     * Gets the owner of the skull, if one exists", "     *", "     * @return the owner of the skull or null if this skull does not have an owner", " */", " public OfflinePlayer getPlayer();", "", " /**", "     * Sets the owner of the skull to this player", "     * <p>", "     * If the owner does not contain all the needed data for the skull a call to", "     * {@link #update()} may potentially involve a blocking web request to acquire", "     * the missing data.", "     *", "     * @param player the new owner of the skull", "     * @return true if the owner was successfully set", " */", " public boolean setPlayer(OfflinePlayer player);", ""], "removed_rows": ["     * @return the owner of the skull", "     * Sets the owner of the skull"]}, {"name": "defaults/BanCommand.java", "is_deleted": false, "new_rows": [" Player player = Bukkit.getPlayer(args[0]);", " String uuid;", " if (player != null) {", "            uuid = player.getUniqueId().toString();", "        } else {", "            uuid = sender.getServer().getOfflinePlayer(args[0]).getUniqueId().toString();", "        }", "", " Bukkit.getBanList(BanList.Type.UUID).addBan(uuid, reason, null, sender.getName());"], "removed_rows": [" Bukkit.getBanList(BanList.Type.NAME).addBan(args[0], reason, null, sender.getName());", " Player player = Bukkit.getPlayer(args[0]);"]}, {"name": "defaults/BanListCommand.java", "is_deleted": false, "new_rows": ["import java.util.UUID;", "import org.bukkit.OfflinePlayer;", " BanList.Type banType = BanList.Type.UUID;", "", " String output = banlist[x].getTarget();", " if (banType == BanList.Type.UUID) {", " try {", " OfflinePlayer player = sender.getServer().getOfflinePlayer(UUID.fromString(output));", " if (player.getName() != null) {", "                        output = player.getName();", "                    }", "                } catch (IllegalArgumentException ex) {", " // We seem to have an invalid UUID, what do?", "                }", "            }", ""], "removed_rows": [" BanList.Type banType = BanList.Type.NAME;"]}, {"name": "defaults/PardonCommand.java", "is_deleted": false, "new_rows": [" String uuid = sender.getServer().getOfflinePlayer(args[0]).getUniqueId().toString();", " Bukkit.getBanList(BanList.Type.UUID).pardon(uuid);"], "removed_rows": [" Bukkit.getBanList(BanList.Type.NAME).pardon(args[0]);"]}, {"name": "entity/AnimalTamer.java", "is_deleted": false, "new_rows": ["import java.util.UUID;", "", "     * @return The name to reference on tamed animals or null if a name cannot be obtained", "", " /**", "     * This is the UUID of the specified AnimalTamer.", "     *", "     * @return The UUID to reference on tamed animals", " */", " public UUID getUniqueId();"], "removed_rows": ["     * @return The name to reference on tamed animals"]}]}