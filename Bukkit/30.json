{"files": [{"name": "defaults/ScoreboardCommand.java", "is_deleted": false, "new_rows": [" Score score = objective.getScore(playerName);", "                mainScoreboard.resetScores(playerName);", " Set<String> entries = mainScoreboard.getEntries();", " if (entries.isEmpty()) {", "                        sender.sendMessage(ChatColor.DARK_GREEN + \"Showing \" + entries.size() + \" tracked players on the scoreboard\");", "                        sender.sendMessage(stringCollectionToString(entries));", " Set<Score> scores = mainScoreboard.getScores(playerName);", " return StringUtil.copyPartialMatches(args[2], this.getCurrentEntries(), new ArrayList<String>());", " private List<String> getCurrentEntries() {", " for (String entry : Bukkit.getScoreboardManager().getMainScoreboard().getEntries()) {", "            list.add(entry);"], "removed_rows": [" Score score = objective.getScore(Bukkit.getOfflinePlayer(playerName));", "                mainScoreboard.resetScores(Bukkit.getOfflinePlayer(playerName));", " Set<OfflinePlayer> players = mainScoreboard.getPlayers();", " if (players.isEmpty()) {", "                        sender.sendMessage(ChatColor.DARK_GREEN + \"Showing \" + players.size() + \" tracked players on the scoreboard\");", "                        sender.sendMessage(offlinePlayerSetToString(players));", " Set<Score> scores = mainScoreboard.getScores(Bukkit.getOfflinePlayer(playerName));", " return StringUtil.copyPartialMatches(args[2], this.getCurrentPlayers(), new ArrayList<String>());", " private List<String> getCurrentPlayers() {", " for (OfflinePlayer player : Bukkit.getScoreboardManager().getMainScoreboard().getPlayers()) {", "            list.add(player.getName());"]}, {"name": "scoreboard/Objective.java", "is_deleted": false, "new_rows": [" * An objective on a scoreboard that can show scores specific to entries. This", "     * @deprecated Scoreboards can contain entries that aren't players", "     * @see #getScore(String)", " @Deprecated", "", " /**", "     * Gets an entry's Score for an Objective on this Scoreboard.", "     *", "     * @param entry Entry for the Score", "     * @return Score tracking the Objective and entry specified", "     * @throws IllegalArgumentException if entry is null", "     * @throws IllegalStateException if this objective has been unregistered", " */", " Score getScore(String entry) throws IllegalArgumentException, IllegalStateException;"], "removed_rows": [" * An objective on a scoreboard that can show scores specific to players. This"]}, {"name": "scoreboard/Score.java", "is_deleted": false, "new_rows": [" * A score entry for an {@link #getEntry() entry} on an {@link", "     * @deprecated Scoreboards can contain entries that aren't players", "     * @see #getEntry()", " @Deprecated", " /**", "     * Gets the entry being tracked by this Score", "     *", "     * @return this Score's tracked entry", " */", " String getEntry();", ""], "removed_rows": [" * A score entry for a {@link #getPlayer() player} on an {@link"]}, {"name": "scoreboard/Scoreboard.java", "is_deleted": false, "new_rows": ["     * @deprecated Scoreboards can contain entries that aren't players", "     * @see #getScores(String)", " @Deprecated", " /**", "     * Gets all scores for an entry on this Scoreboard", "     *", "     * @param entry the entry whose scores are being retrieved", "     * @return immutable set of all scores tracked for the entry", "     * @throws IllegalArgumentException if entry is null", " */", " Set<Score> getScores(String entry) throws IllegalArgumentException;", "", "     * @param player the player to drop all current scores for", "     * @deprecated Scoreboards can contain entries that aren't players", "     * @see #resetScores(String)", " @Deprecated", " /**", "     * Removes all scores for an entry on this Scoreboard", "     *", "     * @param entry the entry to drop all current scores for", "     * @throws IllegalArgumentException if entry is null", " */", " void resetScores(String entry) throws IllegalArgumentException;", "", "     * @deprecated Scoreboards can contain entries that aren't players", "     * @see #getEntries()", " @Deprecated", " /**", "     * Gets all entries tracked by this Scoreboard", "     *", "     * @return immutable set of all tracked entries", " */", " Set<String> getEntries();", ""], "removed_rows": ["     * @param player the player to drop all current scores"]}]}