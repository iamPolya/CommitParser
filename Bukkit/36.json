{"files": [{"name": "bukkit/BanEntry.java", "is_deleted": false, "new_rows": [" * A single entry from a ban list. This may represent either a player ban or", " * an IP ban.", " * <p>", " * <table border=1>", " * <tr>", " *     <th>Property</th>", " *     <th>Description</th>", " * </tr><tr>", " *     <td>Target Name / IP Address</td>", " *     <td>The target name or IP address</td>", " * </tr><tr>", " *     <td>Creation Date</td>", " *     <td>The creation date of the ban</td>", " * </tr><tr>", " *     <td>Source</td>", " *     <td>The source of the ban, such as a player, console, plugin, etc</td>", " * </tr><tr>", " *     <td>Expiration Date</td>", " *     <td>The expiration date of the ban</td>", " * </tr><tr>", " *     <td>Reason</td>", " *     <td>The reason for the ban</td>", " * </tr>", " * </table>", " * <p>", " * Unsaved information is not automatically written to the implementation's", " * ban list, instead, the {@link #save()} method must be called to write the", " * changes to the ban list. If this ban entry has expired (such as from an", " * unban) and is no longer found in the list, the {@link #save()} call will", " * re-add it to the list, therefore banning the victim specified.", " * <p>", " * Likewise, changes to the associated {@link BanList} or other entries may or", " * may not be reflected in this entry.", "", "     * Gets the target involved. This may be in the form of an IP or a player", "     * name.", "     * @return the target name or IP address", "     * @return the creation date", "     * Sets the date this ban entry was created.", "     * @param created the new created date, cannot be null", "     * @see #save() saving changes", "     * Gets the source of this ban.", "     * <p>", "     * Note: A source is considered any String, although this is generally a", "     * player name.", "     * @return the source of the ban", "     * Sets the source of this ban.", "     * <p>", "     * Note: A source is considered any String, although this is generally a", "     * player name.", "     * @param source the new source where null values become empty strings", "     * @see #save() saving changes", "     * @return the expiration date", "     * Sets the date this ban expires on. Null values are considered", "     * \"infinite\" bans.", "     * @param expiration the new expiration date, or null to indicate an", "     *     eternity", "     * @see #save() saving changes", "     * @return the ban reason, or null if not set", "     * Sets the reason for this ban. Reasons must not be null.", "     * @param reason the new reason, null values assume the implementation", "     *     default", "     * @see #save() saving changes", "     * Saves the ban entry, overwriting any previous data in the ban list.", "     * <p>", "     * Saving the ban entry of an unbanned player will cause the player to be", "     * banned once again."], "removed_rows": [" * A single entry from the ban list. This may represent either a player ban or an", " * IP ban.<br />", " * <ul>", " *     <li><b>Target Name/IP Address</b> - The target name or IP address", " *     <li><b>Creation Date</b> - The creation date of the ban", " *     <li><b>Source</b> - The source of the ban, such as a player, console, plugin, etc", " *     <li><b>Expiration Date</b> - The expiration date of the ban", " *     <li><b>Reason</b> - The reason for the ban", " * </ul>", " * Unsaved information is not automatically written to the implementation's ban list, instead,", " * the {@link #save()} method must be called to write the changes to the ban list. If this ban", " * entry has expired (such as from an unban) and is no longer found in the list, the {@link #save()}", " * call will re-add it to the list, therefore banning the victim specified.", "     * Gets the target involved. This may be in the form of an IP or a player name.", "     * @return The target name or IP address", "     * @return The creation date", "     * Sets the date this ban entry was created.<br />", "     * Use {@link #save()} to save the changes.", "     * @param created The new created date, cannot be null", "     * Gets the source of this ban.<br />", "     * A source is considered any String, although this is generally a player name.", "     * @return The source of the ban", "     * Sets the source of this ban.<br />", "     * A source is considered any String, although this is generally a player name.<br />", "     * Use {@link #save()} to save the changes.", "     * @param source The new source where null values become empty strings", "     * @return The expiration date", "     * Sets the date this ban expires on. Null values are considered \"infinite\" bans.<br />", "     * Use {@link #save()} to save the changes.", "     * @param expiry The new expiration date, or null to indicate an eternity", "     * @return The ban reason or null if not set", "     * Sets the reason for this ban. Reasons must not be null.<br />", "     * Use {@link #save()} to save the changes.", "     * @param reason The new reason, null values assume the implementation default", "     * Saves the ban entry, overwriting any previous data in the ban list.<br />", "     * Saving the ban entry of an unbanned player will cause the player to be banned once again.", ""]}, {"name": "bukkit/BanList.java", "is_deleted": false, "new_rows": [" * A ban list, containing bans of some {@link Type}.", "", " /**", "     * Represents a ban-type that a {@link BanList} may track.", " */", " public enum Type {", " /**", "         * Banned player names", " */", " NAME,", " /**", "         * Banned player IP addresses", " */", " IP,", "        ;", "    }", "", "     * @param target entry parameter to search for", "     * @return the corresponding entry, or null if none found", "     * Adds a ban to the this list. If a previous ban exists, this will", "     * update the previous entry.", "     * @param target the target of the ban", "     * @param reason reason for the ban, null indicates implementation default", "     * @param expires date for the ban's expiration (unban), or null to imply", "     *     forever", "     * @param source source of the ban, null indicates implementation default", "     * @return the entry for the newly created ban, or the entry for the", "     *     (updated) previous ban", "     * Gets a set containing every {@link BanEntry} in this list.", "     * @return an immutable set containing every entry tracked by this list", "     * Gets if a {@link BanEntry} exists for the target, indicating an active", "     * ban status.", "     * @param target the target to find", "     * @return true if a {@link BanEntry} exists for the name, indicating an", "     *     active ban status, false otherwise", "     * Removes the specified target from this list, therefore indicating a", "     * \"not banned\" status.", "     * @param target the target to remove from this list"], "removed_rows": [" * A ban list, containing bans of type {@link org.bukkit.BanList.Type}", "     * @param target Entry parameter to search for", "     * @return BanEntry for the submitted query, or null if none found", "     * Adds a ban to the ban list. If a previous ban exists, this will overwrite the previous", "     * entry.", "     * @param target The target of the ban", "     * @param reason Reason for the ban. If null, the implementation default is assumed", "     * @param expires Expiration Date of the ban. If null, \"infinity\" is assumed", "     * @param source Source of the ban. If null, the implementation default is assumed", "     * @return The BanEntry of the added ban", "     * Gets a set containing every {@link BanEntry} in the BanList.", "     * @return an immutable set containing every BanEntry tracked by the BanList", "     * Gets if a {@link BanEntry} exists for the target, indicating ban status", "     * @param target Entry target to lookup", "     * @return true if a {@link BanEntry} exists for the name, indicating ban status", "     * Removes the specified target from the list, therefore indicating a \"not banned\" status.", "     * @param target The target to remove from the list", "", " /**", "     * Represents the various types a {@link BanList} may track.", " */", " public enum Type {", " /**", "         * Banned player names", " */", " NAME,", " /**", "         * Banned player IP addresses", " */", " IP;", "    }", ""]}, {"name": "bukkit/Bukkit.java", "is_deleted": false, "new_rows": ["  return server.getBanList(type);"], "removed_rows": ["  return server.getBanList(type);"]}, {"name": "bukkit/Material.java", "is_deleted": false, "new_rows": [" * An enum of all material IDs accepted by the official server and client"], "removed_rows": [" * An enum of all material ids accepted by the official server + client"]}, {"name": "bukkit/OfflinePlayer.java", "is_deleted": false, "new_rows": ["import java.util.Date;", "", "     * @deprecated Use {@link org.bukkit.BanList#addBan(String, String, Date,", "     *     String)} or {@link org.bukkit.BanList#pardon(String)} to enhance", "     *     functionality"], "removed_rows": ["     * @deprecated Use {@link org.bukkit.BanList#addBan(String, String, java.util.Date, String)} or {@link org.bukkit.BanList#unban(String)} to enhance functionality"]}]}