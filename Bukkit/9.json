{"files": [{"name": "bukkit/Bukkit.java", "is_deleted": false, "new_rows": ["import java.util.Collection;", " /**", "     * This method exists for legacy reasons to provide backwards", "     * compatibility. It will not exist at runtime and should not be used", "     * under any circumstances.", "     *", "     * @Deprecated", "     * @see Server#_INVALID_getOnlinePlayers()", " */", " @Deprecated", " public static Player[] _INVALID_getOnlinePlayers() {", " return server._INVALID_getOnlinePlayers();", "    }", "", " public static Collection<? extends Player> getOnlinePlayers() {"], "removed_rows": [" public static Player[] getOnlinePlayers() {"]}, {"name": "bukkit/Server.java", "is_deleted": false, "new_rows": ["import java.io.Serializable;", "import java.util.Collection;", "import java.util.Collections;", "import org.bukkit.entity.Entity;", "import com.google.common.collect.ImmutableList;", "     * Gets an array copy of all currently logged in players.", "     * <p>", "     * This method exists for legacy reasons to provide backwards", "     * compatibility. It will not exist at runtime and should not be used", "     * under any circumstances.", "     * @Deprecated superseded by {@link #getOnlinePlayers()}", " @Deprecated", " public Player[] _INVALID_getOnlinePlayers();", "", " /**", "     * Gets a view of all currently logged in players. This {@linkplain", "     * Collections#unmodifiableCollection(Collection) view} is a reused", "     * object, making some operations like {@link Collection#size()}", "     * zero-allocation.", "     * <p>", "     * The collection is a view backed by the internal representation, such", "     * that, changes to the internal state of the server will be reflected", "     * immediately. However, the reuse of the returned collection (identity)", "     * is not strictly guaranteed for future or all implementations. Casting", "     * the collection, or relying on interface implementations (like {@link", "     * Serializable} or {@link List}), is deprecated.", "     * <p>", "     * Iteration behavior is undefined outside of self-contained main-thread", "     * uses. Normal and immediate iterator use without consequences that", "     * affect the collection are fully supported. The effects following", "     * (non-exhaustive) {@link Entity#teleport(Location) teleportation},", "     * {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(", "     * String) kicking} are undefined. Any use of this collection from", "     * asynchronous threads is unsafe.", "     * <p>", "     * For safe consequential iteration or mimicking the old array behavior,", "     * using {@link Collection#toArray(Object[])} is recommended. For making", "     * snapshots, {@link ImmutableList#copyOf(Collection)} is recommended.", "     *", "     * @return a view of currently online players.", " */", " public Collection<? extends Player> getOnlinePlayers();"], "removed_rows": ["     * Gets a list of all currently logged in players.", " public Player[] getOnlinePlayers();"]}, {"name": "defaults/ListCommand.java", "is_deleted": false, "new_rows": ["import java.util.Collection;", " final Collection<? extends Player> players = Bukkit.getOnlinePlayers();", "        sender.sendMessage(\"There are \" + players.size() + \"/\" + Bukkit.getMaxPlayers() + \" players online:\\n\" + online.toString());"], "removed_rows": [" Player[] players = Bukkit.getOnlinePlayers();", "        sender.sendMessage(\"There are \" + players.length + \"/\" + Bukkit.getMaxPlayers() + \" players online:\\n\" + online.toString());"]}, {"name": "player/PlayerChatEvent.java", "is_deleted": false, "new_rows": [" this.recipients = new HashSet<Player>(player.getServer().getOnlinePlayers());"], "removed_rows": ["import java.util.Arrays;", " this.recipients = new HashSet<Player>(Arrays.asList(player.getServer().getOnlinePlayers()));"]}, {"name": "player/PlayerCommandPreprocessEvent.java", "is_deleted": false, "new_rows": [" this.recipients = new HashSet<Player>(player.getServer().getOnlinePlayers());"], "removed_rows": ["import java.util.Arrays;", " this.recipients = new HashSet<Player>(Arrays.asList(player.getServer().getOnlinePlayers()));"]}]}