{"files": [{"name": "bukkit/BukkitMirrorTest.java", "is_deleted": false, "new_rows": ["import static org.hamcrest.Matchers.*;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.Before;", "import org.junit.runner.RunWith;", "import org.junit.runners.Parameterized;", "import org.junit.runners.Parameterized.Parameter;", "import org.junit.runners.Parameterized.Parameters;", "import com.google.common.base.Function;", "import com.google.common.collect.Lists;", "", "@RunWith(Parameterized.class)", "", " @Parameters(name=\"{index}: {1}\")", " public static List<Object[]> data() {", " return Lists.transform(Arrays.asList(Server.class.getDeclaredMethods()), new Function<Method, Object[]>() {", " @Override", " public Object[] apply(Method input) {", " return new Object[] {", "                    input,", "                    input.toGenericString().substring(\"public abstract \".length()).replace(\"(\", \"{\").replace(\")\", \"}\")", "                    };", "            }", "        });", "    }", "", " @Parameter(0)", " public Method server;", "", " @Parameter(1)", " public String name;", "", " private Method bukkit;", "", " @Before", " public void makeBukkit() throws Throwable {", "        bukkit = Bukkit.class.getDeclaredMethod(server.getName(), server.getParameterTypes());", "    }", "", " @Test", " public void isStatic() throws Throwable {", "        assertThat(Modifier.isStatic(bukkit.getModifiers()), is(true));", "    }", "", " @Test", " public void isDeprecated() throws Throwable {", "        assertThat(bukkit.isAnnotationPresent(Deprecated.class), is(server.isAnnotationPresent(Deprecated.class)));", "    }", "", " @Test", " public void returnType() throws Throwable {", "        assertThat(bukkit.getReturnType(), is((Object) server.getReturnType()));", "        assertThat(bukkit.getGenericReturnType(), is(server.getGenericReturnType()));", "    }", "", " @Test", " public void parameterTypes() throws Throwable {", "        assertThat(bukkit.getGenericParameterTypes(), is(server.getGenericParameterTypes()));", "    }", "", " public void declaredException() throws Throwable {", "        assertThat(bukkit.getGenericExceptionTypes(), is(server.getGenericExceptionTypes()));"], "removed_rows": [" public final void test() throws NoSuchMethodException {", " Method[] serverMethods = Server.class.getDeclaredMethods();", " for(Method method : serverMethods) {", " Method mirrorMethod = Bukkit.class.getDeclaredMethod(method.getName(), method.getParameterTypes());", "            assertTrue(\"Bukkit.\" + method.getName() + \" must be static!\", Modifier.isStatic(mirrorMethod.getModifiers()));", "        }"]}]}